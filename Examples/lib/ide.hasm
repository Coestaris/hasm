#ifndef _ide_hasm_

#if defined(__ide_ver_minor) && defined(__ide_ver_major)
#define _ide_ver __ide_ver_major * 100 + __ide_ver_minor
#endif

#ifndef __base__
#error Base must be set by parser
#endif

#if __base__ == 8

#define _8base
#define _std_base

#elif __base__ == 16

#define _16base
#define _std_base

#elif __base__ == 32

#define _32base
#define _std_base


#elif __base__ == 64

#define _64base
#define _std_base

#elif __base__ == 12

#define _12base

#elif __base__ == 4

#define _4base

#endif

#define _call__0(funcName)                                      \
    call funcName                                               \

#define _call__1(funcName, arg1)                                \
    pusha arg1                                                  \
    call funcName                                               \
    
#define _call__2(funcName, arg1, arg2)                          \
    pusha arg1                                                  \
    pusha arg2                                                  \
    call funcName                                               \
    
#define _call__3(funcName, arg1, arg2, arg3)                    \
    pusha arg1                                                  \
    pusha arg2                                                  \   
    pusha arg3                                                  \
    call funcName                                               \
    
#define _callr_0(resultName, resultType, funcName)              \
    alloc resultName, resultType                                \
    pusha arg1                                                  \
    pusha arg2                                                  \
    call funcName                                               \
    popr resultName                                             \
    
#define _callr_1(resultName, resultType, funcName, arg1)        \
    alloc resultName, resultType                                \
    pusha arg1                                                  \
    pusha arg2                                                  \
    call funcName                                               \
    popr resultName                                             \
    
#define _callr_2(resultName, resultType, funcName, arg1, arg2)  \
    alloc resultName, resultType                                \
    pusha arg1                                                  \
    pusha arg2                                                  \
    call funcName                                               \
    popr resultName                                             \
    
#define _callr_3(resultName, resultType, funcName, arg1, arg2, arg3) \
    alloc resultName, resultType                                     \
    pusha arg1                                                       \
    pusha arg2                                                       \
    pusha arg3                                                       \
    call funcName                                                    \
    popr resultName                                                  \


#define ocall__1(objName, funcName, arg1)                       \
    pusho objName                                               \
    pusha arg1                                                  \
    call funcName                                               \
    
#define ocall__2(objName, funcName, arg1, arg2)                 \
    pusho objName                                               \
    pusha arg1                                                  \
    pusha arg2                                                  \
    call funcName                                               \
    
#define ocall__3(objName, funcName, arg1, arg2, arg3)           \
    pusho objName                                               \    
    pusha arg1                                                  \
    pusha arg2                                                  \   
    pusha arg3                                                  \
    call funcName                                               \
    
#define ocallr_0(objName, resultName, resultType, funcName)     \
    pusho objName                                               \    
    alloc resultName, resultType                                \
    pusha arg1                                                  \
    pusha arg2                                                  \
    call funcName                                               \
    popr resultName                                             \
    
#define ocallr_1(objName, resultName, resultType, funcName, arg1) \
    pusho objName                                                 \    
    alloc resultName, resultType                                  \
    pusha arg1                                                    \
    pusha arg2                                                    \
    call funcName                                                 \
    popr resultName                                               \
    
#define ocallr_2(objName, resultName, resultType, funcName, arg1, arg2) \
    pusho objName                                                       \    
    alloc resultName, resultType                                        \
    pusha arg1                                                          \
    pusha arg2                                                          \
    call funcName                                                       \
    popr resultName                                                     \
    
#define ocallr_3(objName, resultName, resultType, funcName, arg1, arg2, arg3) \
    pusho objName                                                             \    
    alloc resultName, resultType                                              \
    pusha arg1                                                                \
    pusha arg2                                                                \
    pusha arg3                                                                \
    call funcName                                                             \
    popr resultName                                                           \
    
#define ialloc(varName, varType, value)              \
    alloc varName, varType                           \
    ldi varName, value                               \

#define _fset(fieldName, value)                      \
    setv fieldName, value                            \

#define ofset(fieldName, objName, value)             \
    pusho objName                                    \
    setv fieldName, value                            \    

#define _fget(fieldName, varName, typeName)          \
    alloc varName, typeName                          \
    getv fieldName                                   \
    popr varName                                     \

#define ofget(fieldName, varName, typeName, objName) \
    alloc varName, typeName                          \    
    pusho objName                                    \
    getv fieldName                                   \
    popr varName                                     \
    
#endif
