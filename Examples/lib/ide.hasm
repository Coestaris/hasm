#ifndef _ide_hasm_

#if defined(__ide_ver_minor) && defined(__ide_ver_major)
#define _ide_ver __ide_ver_major * 100 + __ide_ver_minor
#endif

#ifndef __base__
#error Base must be set by parser
#endif

#if __base__ == 8

#define _8base
#define _std_base

#elif __base__ == 16

#define _16base
#define _std_base

#elif __base__ == 32

#define _32base
#define _std_base


#elif __base__ == 64

#define _64base
#define _std_base

#elif __base__ == 12

#define _12base

#elif __base__ == 4

#define _4base

#endif

#define _call__0(funcName)                                      \
    call funcName                                               \

#define _call__1(funcName, arg1)                                \
    pusha arg1                                                  \
    call funcName                                               \
    
#define _call__2(funcName, arg1, arg2)                          \
    pusha arg1                                                  \
    pusha arg2                                                  \
    call funcName                                               \
    
#define _call__3(funcName, arg1, arg2, arg3)                    \
    pusha arg1                                                  \
    pusha arg2                                                  \   
    pusha arg3                                                  \
    call funcName                                               \
    
#define _callr_0(resultName, resultType, funcName)              \
    alloc resultName, resultType                                \
    pusha arg1                                                  \
    pusha arg2                                                  \
    call funcName                                               \
    popr resultName                                             \
    
#define _callr_1(resultName, resultType, funcName, arg1)        \
    alloc resultName, resultType                                \
    pusha arg1                                                  \
    pusha arg2                                                  \
    call funcName                                               \
    popr resultName                                             \
    
#define _callr_2(resultName, resultType, funcName, arg1, arg2)  \
    alloc resultName, resultType                                \
    pusha arg1                                                  \
    pusha arg2                                                  \
    call funcName                                               \
    popr resultName                                             \
    
#define _callr_3(resultName, resultType, funcName, arg1, arg2, arg3) \
    alloc resultName, resultType                                     \
    pusha arg1                                                       \
    pusha arg2                                                       \
    pusha arg3                                                       \
    call funcName                                                    \
    popr resultName                                                  \

#endif
